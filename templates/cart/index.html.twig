{% extends 'index.html.twig' %}

{% block title %}Shopping Cart{% endblock %}

{% block body %}
<div class="container-fluid py-5 wow fadeInUp" data-wow-delay="0.1s">
    <div class="container py-5">
        <div class="section-title text-center position-relative pb-3 mb-5 mx-auto" style="max-width: 600px;">
            <h5 class="fw-bold text-primary text-uppercase">Shopping Cart</h5>
            <h1 class="mb-0">Your Selected Products</h1>
        </div>

        {% if cart_items|length > 0 %}
            <div class="row">
                <div class="col-lg-8">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="bg-light">
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in cart_items %}
                                    <tr class="cart-item" data-id="{{ item.id }}">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <img src="{{ item.product.imageUrl ?: asset('img/maintenance.jpeg') }}" 
                                                     alt="{{ item.product.name }}" 
                                                     class="img-fluid rounded" 
                                                     style="max-width: 80px;">
                                                <div class="ms-3">
                                                    <h6 class="mb-0">{{ item.product.name }}</h6>
                                                    <small class="text-muted">{{ item.product.brand }}</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>${{ item.product.price|number_format(2, '.', ',') }}</td>
                                        <td>
                                            <div class="input-group quantity-control" style="width: 120px;">
                                                <button class="btn btn-sm btn-outline-secondary quantity-decrease">-</button>
                                                <input type="number" class="form-control text-center quantity-input" 
                                                       value="{{ item.quantity }}" min="1" max="{{ item.product.stockQuantity }}">
                                                <button class="btn btn-sm btn-outline-secondary quantity-increase">+</button>
                                            </div>
                                        </td>
                                        <td class="item-total">${{ (item.product.price * item.quantity)|number_format(2, '.', ',') }}</td>
                                        <td>
                                            <button class="btn btn-sm btn-danger remove-item">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="card border-0 shadow">
                        <div class="card-body">
                            <h5 class="card-title mb-4">Order Summary</h5>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Subtotal</span>
                                <span id="cart-subtotal">${{ cart_total|number_format(2, '.', ',') }}</span>
                            </div>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Shipping</span>
                                <span>Free</span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between mb-4">
                                <strong>Total</strong>
                                <strong id="cart-total">${{ cart_total|number_format(2, '.', ',') }}</strong>
                            </div>
                            <button class="btn btn-primary w-100">Proceed to Checkout</button>
                        </div>
                    </div>
                </div>
            </div>
        {% else %}
            <div class="text-center py-5">
                <i class="bi bi-cart-x" style="font-size: 5rem;"></i>
                <h3 class="mt-4">Your cart is empty</h3>
                <p class="text-muted">Looks like you haven't added any products to your cart yet.</p>
                <a href="{{ path('app_product_index') }}" class="btn btn-primary mt-3">
                    <i class="bi bi-arrow-left me-2"></i> Continue Shopping
                </a>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Handle quantity increase
    document.querySelectorAll('.quantity-increase').forEach(button => {
        button.addEventListener('click', function() {
            const input = this.parentElement.querySelector('.quantity-input');
            const currentValue = parseInt(input.value);
            const maxValue = parseInt(input.getAttribute('max'));
            
            if (currentValue < maxValue) {
                input.value = currentValue + 1;
                updateCartItem(this.closest('.cart-item'));
            }
        });
    });
    
    // Handle quantity decrease
    document.querySelectorAll('.quantity-decrease').forEach(button => {
        button.addEventListener('click', function() {
            const input = this.parentElement.querySelector('.quantity-input');
            const currentValue = parseInt(input.value);
            
            if (currentValue > 1) {
                input.value = currentValue - 1;
                updateCartItem(this.closest('.cart-item'));
            }
        });
    });
    
    // Handle manual quantity input
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', function() {
            let value = parseInt(this.value);
            const maxValue = parseInt(this.getAttribute('max'));
            
            if (isNaN(value) || value < 1) {
                value = 1;
            } else if (value > maxValue) {
                value = maxValue;
            }
            
            this.value = value;
            updateCartItem(this.closest('.cart-item'));
        });
    });
    
    // Handle remove item
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
            const cartItem = this.closest('.cart-item');
            const itemId = cartItem.dataset.id;
            
            fetch(`/cart/remove/${itemId}`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the item from the DOM
                    cartItem.remove();
                    
                    // Update cart count in navbar
                    updateCartCount(data.cartCount);
                    
                    // If no items left, reload the page to show empty cart message
                    if (document.querySelectorAll('.cart-item').length === 0) {
                        window.location.reload();
                    }
                }
            });
        });
    });
    
    // Function to update cart item quantity
    function updateCartItem(cartItem) {
        const itemId = cartItem.dataset.id;
        const quantity = cartItem.querySelector('.quantity-input').value;
        
        fetch(`/cart/update/${itemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: `quantity=${quantity}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update item total
                const price = parseFloat(cartItem.querySelector('td:nth-child(2)').textContent.replace('$', '').replace(',', ''));
                const newTotal = (price * quantity).toFixed(2);
                cartItem.querySelector('.item-total').textContent = '$' + newTotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                
                // Update cart totals
                document.getElementById('cart-subtotal').textContent = '$' + data.cartTotal.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById('cart-total').textContent = '$' + data.cartTotal.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                
                // Update cart count in navbar
                updateCartCount(data.cartCount);
            }
        });
    }
    
    // Function to update cart count in navbar
    function updateCartCount(count) {
        const cartCountElement = document.querySelector('.cart-count');
        if (cartCountElement) {
            cartCountElement.textContent = count;
            
            // Show/hide cart icon based on count
            if (count > 0) {
                document.querySelector('.cart-icon-container').classList.remove('d-none');
            } else {
                document.querySelector('.cart-icon-container').classList.add('d-none');
            }
        }
    }
});
</script>
{% endblock %}
